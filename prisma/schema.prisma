generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id @default(uuid())
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  img         String?
  bloodType   String
  sex         UserSex
  createdAt   DateTime     @default(now())
  parentId    String
  classId     Int
  gradeId     Int
  birthday    DateTime
  attendances Attendance[]
  results     Result[]
  class       Class        @relation(fields: [classId], references: [id])
  grade       Grade        @relation(fields: [gradeId], references: [id])
  parent      Parent       @relation(fields: [parentId], references: [id])
}

model Teacher {
  id              String    @id @default(uuid())
  username        String    @unique
  name            String
  surname         String
  email           String?   @unique
  phone           String?   @unique
  address         String
  img             String?
  bloodType       String
  sex             UserSex
  createdAt       DateTime  @default(now())
  birthday        DateTime
  isActive        Boolean   @default(true)
  status          String    @default("ACTIVE")
  supervisedClass Class[]   @relation("ClassSupervisor")
  lessons         Lesson[]  @relation("TeacherLessons")
  subjects        Subject[] @relation("SubjectToTeacher")
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String    @unique
  address   String
  createdAt DateTime  @default(now())
  students  Student[]
}

model Grade {
  id       Int       @id @default(autoincrement())
  level    Int       @unique
  classes  Class[]
  students Student[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  supervisorId  String?
  gradeId       Int
  announcements Announcement[]
  grade         Grade          @relation(fields: [gradeId], references: [id])
  supervisor    Teacher?       @relation("ClassSupervisor", fields: [supervisorId], references: [id])
  events        Event[]
  lessons       Lesson[]
  students      Student[]
}

model Subject {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  lessons  Lesson[]
  teachers Teacher[] @relation("SubjectToTeacher")
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  classId     Int
  teacherId   String
  assignments Assignment[]
  attendances Attendance[]
  exams       Exam[]
  class       Class        @relation(fields: [classId], references: [id])
  subject     Subject      @relation(fields: [subjectId], references: [id])
  teacher     Teacher      @relation("TeacherLessons", fields: [teacherId], references: [id])
}

model Exam {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startDate DateTime
  dueDate   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int         @id @default(autoincrement())
  score        Int
  examId       Int?
  assignmentId Int?
  studentId    String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id])
  exam         Exam?       @relation(fields: [examId], references: [id])
  student      Student     @relation(fields: [studentId], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  student   Student  @relation(fields: [studentId], references: [id])
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startTime   DateTime
  endTime     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  users       User[]
  permissions Permission[] @relation("PermissionToRole")
}

model Menu {
  id          Int          @id @default(autoincrement())
  name        String
  path        String
  icon        String?
  order       Int          @default(0)
  parentId    Int?
  parent      Menu?        @relation("MenuToMenu", fields: [parentId], references: [id])
  children    Menu[]       @relation("MenuToMenu")
  permissions Permission[]
}

model Permission {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  menuId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  menu      Menu     @relation(fields: [menuId], references: [id])
  roles     Role[]   @relation("PermissionToRole")
}

model User {
  id                               Int       @id @default(autoincrement())
  name                             String?   @db.VarChar(255)
  email                            String    @unique
  password                         String    @db.VarChar(255)
  roleId                           Int?
  createdAt                        DateTime  @default(now())
  updatedAt                        DateTime  @updatedAt
  Message_Message_receiverIdToUser Message[] @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser   Message[] @relation("Message_senderIdToUser")
  posts                            Post[]
  profile                          Profile?
  role                             Role?     @relation(fields: [roleId], references: [id])
}

model Message {
  id                            String   @id
  content                       String
  createdAt                     DateTime @default(now())
  senderId                      Int
  receiverId                    Int
  User_Message_receiverIdToUser User     @relation("Message_receiverIdToUser", fields: [receiverId], references: [id])
  User_Message_senderIdToUser   User     @relation("Message_senderIdToUser", fields: [senderId], references: [id])
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
}


model Branch {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isMainBranch Boolean  @default(false)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}

model Session {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  startDate DateTime
  endDate DateTime
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}

model Group {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}

model Shift {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  startTime DateTime
  endTime DateTime
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model Version {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model Gender {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model Religion {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model Nationality {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}

model Occupation {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model Designation {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model BloodGroup {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model ExamType {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model ExamGrade {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  minScore Int
  maxScore Int
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model ExamInfo {
  id Int       @id @default(autoincrement())
  name String @db.VarChar(100)
  description String @db.VarChar(255)
  isActive Boolean  @default(true)
  schoolId Int
  createdBy Int
  createdDate DateTime @default(now())
  updatedBy Int
  updatedDate DateTime? @updatedAt
}
model SchoolInfo {
  id                    Int       @id @default(autoincrement())
  name                  String    @db.VarChar(100)
  address               String    @db.Text
  phone                 String    @db.VarChar(20)
  email                 String    @db.VarChar(100)
  website               String?   @db.VarChar(100)
  logo                  String?   @db.VarChar(255)
  establishedYear       Int?
  description          String?   @db.Text
  principalName        String?   @db.VarChar(100)
  principalEmail       String?   @db.VarChar(100) 
  principalPhone       String?   @db.VarChar(20)
  principalAddress     String?   @db.Text
  principalPhoto       String?   @db.VarChar(255)
  principalSignature   String?   @db.VarChar(255)
  schoolType           String?   @db.VarChar(50)
  schoolCategory       String?   @db.VarChar(50)
  schoolBoard          String?   @db.VarChar(100)
  affiliationNumber    String?   @db.VarChar(50)
  licenseName          String?   @db.VarChar(50)
  isActive             Boolean   @default(true)
  schoolId             Int
  createdBy            Int
  createdDate          DateTime  @default(now())
  updatedBy            Int
  updatedDate          DateTime? @updatedAt
}
